# This workflow executes GitVersion and outputs version information that can be used in other workflows.
# It can also be executed manually if you want to see what version a current branch is producing-
# look in the "Run GitVersion" step output of the "gitversion" job to see the complete info that
# GitVersion produces, or look in the "Complete Job" step at the end to see the values being made
# available to other workflows.
# Note: In order to bump the major version, include "+semver: major" in a commit message.
name: Version

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      # This input can be used to ensure we don't accidentally make a pre-release from a commit that was tagged with an official version number.
      validatePreRelease:
        description: "When enabled, a validation step will run to ensure the computed version is a pre-release version (with a pre-release tag)."
        required: false
        type: boolean
        default: false
    outputs:
      semVer:
        description: "The calculated SemVer."
        value: ${{ jobs.gitversion.outputs.semVer }}
      preReleaseLabel:
        description: "The pre-release label (if any)."
        value: ${{ jobs.gitversion.outputs.preReleaseLabel }}
      majorMinorPatch:
        description: "The MajorMinorPatch which can be used to pull the next release version from the pre-release version."
        value: ${{ jobs.gitversion.outputs.majorMinorPatch }}

jobs:

  gitversion:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ env.ACT && steps.gitversion_act.outputs.semVer || steps.gitversion_ci.outputs.semVer }}
      majorMinorPatch: ${{ env.ACT && steps.gitversion_act.outputs.majorMinorPatch || steps.gitversion_ci.outputs.majorMinorPatch }}
      preReleaseLabel: ${{ env.ACT && steps.gitversion_act.outputs.preReleaseLabel || steps.gitversion_ci.outputs.preReleaseLabel }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Use official GitVersion actions when NOT running in act
      - name: Install GitVersion
        if: ${{ !env.ACT }}
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '6.3.x'

      - name: Run GitVersion
        if: ${{ !env.ACT }}
        id: gitversion_ci
        uses: gittools/actions/gitversion/execute@v3.2.1

      # Fallback for local `act` runs
      - name: Setup .NET
        if: ${{ env.ACT }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install and Run GitVersion
        if: ${{ env.ACT }}
        id: gitversion_act
        run: |
          dotnet tool install --global GitVersion.Tool --version 6.3.0
          export PATH="$PATH:$HOME/.dotnet/tools"
          dotnet-gitversion /showConfig
          dotnet-gitversion /output json | tee gitversion.json

          # SemVer
          semVer=$(jq -r .SemVer gitversion.json)
          echo "semVer=$semVer" >> $GITHUB_OUTPUT

          # MajorMinorPatch
          majorMinorPatch=$(jq -r .MajorMinorPatch gitversion.json)
          echo "majorMinorPatch=$majorMinorPatch" >> $GITHUB_OUTPUT

          # PreReleaseLabel
          preReleaseLabel=$(jq -r .PreReleaseLabel gitversion.json)
          echo "preReleaseLabel=$preReleaseLabel" >> $GITHUB_OUTPUT

      - name: Validate Pre-Release Tag
        if: ${{ inputs.validatePreRelease == true }}
        run: |
          echo "Validating that the computed version is a pre-release..."
          preReleaseTag="${{ env.ACT && steps.gitversion_act.outputs.preReleaseTag || steps.gitversion_ci.outputs.preReleaseTag }}"
          if [[ -z "$preReleaseTag" ]]; then
            echo "❌ Validation failed: The computed version is a release version (no pre-release tag present)."
            exit 1
          fi
          echo "Validation passed: Pre-release label is '$preReleaseTag'"

      - name: Add Summary
        if: ${{ !env.ACT }}
        run: |
          semVer="${{ env.ACT && steps.gitversion_act.outputs.semVer || steps.gitversion_ci.outputs.semVer }}"
          {
            echo "### GitVersion Result"
            echo "**SemVer**: \`$semVer\`"
          } >> $GITHUB_STEP_SUMMARY

